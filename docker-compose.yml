services:
  outboxer:
    container_name: outboxer
    platform: linux/amd64
    build: "."
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
    restart: on-failure:5
    tty: true
    stdin_open: true
    env_file:
      - .env
    depends_on:
      - postgres
      - kafka
    networks:
      - mynetwork

  postgres:
    container_name: postgres
    image: postgres:15.2-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${PGPORT}:5432"
    env_file:
      - .env
    networks:
      - mynetwork

  migrate:
    container_name: migrate
    image: migrate/migrate
    env_file:
      - .env
    volumes:
      - ./db/migrations:/migrations
    command: [ "-path", "/migrations", "-database", "postgres://${PGUSER}:${PGPASSWORD}@postgres/${PGDATABASE}?sslmode=${PGSSLMODE}", "up" ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mynetwork

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - mynetwork

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
    depends_on:
      - zookeeper
    networks:
      - mynetwork

  init-kafka:
    container_name: init-kafka
    image: wurstmeister/kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # wait for kafka
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list

      echo -e 'create needed topic:'
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic ${KAFKA_TOPIC} --replication-factor 1 --partitions 1

      echo -e 'log about topic creation:'
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list
      "
    networks:
      - mynetwork

volumes:
  postgres_data:

networks:
  mynetwork:
    driver: bridge
