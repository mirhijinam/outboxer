services:
  outboxer:
    container_name: outboxer
    platform: linux/amd64
    build: "."
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
    restart: on-failure:5
    tty: true
    stdin_open: true
    env_file:
      - .env
    depends_on:
      - postgres
      - kafka
  postgres:
    container_name: postgres
    image:
      postgres:15.2-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - ${PGPORT}
    env_file:
      - .env
  migrate:
    container_name: migrate
    image: migrate/migrate
    env_file:
      - .env
    volumes:
      - ./db/migrations:/migrations
    command: [ "-path", "/migrations", "-database",  "postgres://${PGUSER}:${PGPASSWORD}@${PGHOST}/${PGDATABASE}?sslmode=${PGSSLMODE}", "up" ]
    depends_on:
      postgres:
        condition: service_healthy
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
  kafka:
    container_name: kafka
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    depends_on:
      - zookeeper
volumes:
  postgres_data:
